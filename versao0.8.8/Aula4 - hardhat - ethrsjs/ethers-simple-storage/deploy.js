//https://github.com/ethereum/solc-js - to compile .sol
//compile contract example command line: yarn solcjs --bin --abi --include-path node_modules/ --base-path . -o . SimpleStorage.sol

const ethers = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();

async function main() {
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
  const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8"); //set "PRIVATE_KEY_PASSWORD=" && node deploy.js

  let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    encryptedJson,
    process.env.PRIVATE_KEY_PASSWORD
  );

  wallet = await wallet.connect(provider);

  //wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );

  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("Deploying contract, please wait...");

  const contract = await contractFactory.deploy();
  await contract.deployTransaction.wait(1); // espera 1 bloco ser confirmado

  /*console.log("Lets deploy with only transaction data!");
  const nonce = await wallet.getTransactionCount();
  const chainId = await wallet.getChainId();

  const tx = {
    nonce: nonce,
    gasPrice: 20000000000,
    gasLimit: 1000000,
    to: null,
    value: 0,
    data: "0x608060405234801561001057600080fd5b506107e2806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636057361d1161005b5780636057361d146100dc5780638bab8dd5146100f85780639e7a13ad14610128578063bc832d4e146101595761007d565b80632e64cec114610082578063471f7cdf146100a05780634f2be91f146100be575b600080fd5b61008a610175565b60405161009791906103cd565b60405180910390f35b6100a861017e565b6040516100b591906103cd565b60405180910390f35b6100c6610184565b6040516100d391906103cd565b60405180910390f35b6100f660048036038101906100f19190610428565b61018d565b005b610112600480360381019061010d919061059b565b610197565b60405161011f91906103cd565b60405180910390f35b610142600480360381019061013d9190610428565b6101c5565b60405161015092919061066c565b60405180910390f35b610173600480360381019061016e919061069c565b610281565b005b60008054905090565b60005481565b60006002905090565b8060008190555050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b600181815481106101d557600080fd5b90600052602060002090600202016000915090508060000154908060010180546101fe90610727565b80601f016020809104026020016040519081016040528092919081815260200182805461022a90610727565b80156102775780601f1061024c57610100808354040283529160200191610277565b820191906000526020600020905b81548152906001019060200180831161025a57829003601f168201915b5050505050905082565b600160405180604001604052808481526020018381525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906102e7929190610311565b505050816002826040516102fb9190610795565b9081526020016040518091039020819055505050565b82805461031d90610727565b90600052602060002090601f01602090048101928261033f5760008555610386565b82601f1061035857805160ff1916838001178555610386565b82800160010185558215610386579182015b8281111561038557825182559160200191906001019061036a565b5b5090506103939190610397565b5090565b5b808211156103b0576000816000905550600101610398565b5090565b6000819050919050565b6103c7816103b4565b82525050565b60006020820190506103e260008301846103be565b92915050565b6000604051905090565b600080fd5b600080fd5b610405816103b4565b811461041057600080fd5b50565b600081359050610422816103fc565b92915050565b60006020828403121561043e5761043d6103f2565b5b600061044c84828501610413565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104a88261045f565b810181811067ffffffffffffffff821117156104c7576104c6610470565b5b80604052505050565b60006104da6103e8565b90506104e6828261049f565b919050565b600067ffffffffffffffff82111561050657610505610470565b5b61050f8261045f565b9050602081019050919050565b82818337600083830152505050565b600061053e610539846104eb565b6104d0565b90508281526020810184848401111561055a5761055961045a565b5b61056584828561051c565b509392505050565b600082601f83011261058257610581610455565b5b813561059284826020860161052b565b91505092915050565b6000602082840312156105b1576105b06103f2565b5b600082013567ffffffffffffffff8111156105cf576105ce6103f7565b5b6105db8482850161056d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561061e578082015181840152602081019050610603565b8381111561062d576000848401525b50505050565b600061063e826105e4565b61064881856105ef565b9350610658818560208601610600565b6106618161045f565b840191505092915050565b600060408201905061068160008301856103be565b81810360208301526106938184610633565b90509392505050565b600080604083850312156106b3576106b26103f2565b5b60006106c185828601610413565b925050602083013567ffffffffffffffff8111156106e2576106e16103f7565b5b6106ee8582860161056d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061073f57607f821691505b60208210811415610753576107526106f8565b5b50919050565b600081905092915050565b600061076f826105e4565b6107798185610759565b9350610789818560208601610600565b80840191505092915050565b60006107a18284610764565b91508190509291505056fea2646970667358221220456cab708fd2cea3fadda41dd4b58e3c43852dcdcb1ed4e8478807fa2e92e9b964736f6c63430008080033",
    chainId: chainId,
  };

  //const sentTxResponse = await wallet.signTransaction(tx); // assina a transacao
  const sentTxResponse = await wallet.sendTransaction(tx); // envia transacao
  await sentTxResponse.wait(1); // espera 1 bloco ser confirmado

  console.log(sentTxResponse);
  //console.log(contract);*/

  // INTERAGIR COM O CONTRATO INTELIGENTE
  const currentFavoriteNumber = await contract.retrieve();
  console.log(currentFavoriteNumber.toString());

  const transactionResponse = await contract.store("10"); // boas praticas Ã© passar numeros como strings
  const transcationReceipt = await transactionResponse.wait(1);
  const updateNumber = await contract.retrieve();

  console.log(updateNumber.toString());
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
